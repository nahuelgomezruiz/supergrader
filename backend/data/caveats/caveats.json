{
  "6a56b770-531b-4979-b2b3-12483eb6c541": {
    "id": "6a56b770-531b-4979-b2b3-12483eb6c541",
    "rubric_question": "Does the code handle null pointer exceptions?",
    "caveat_text": "Always check for null pointers before dereferencing, especially in C/C++ code.",
    "original_feedback": "The student didn't check for null before using the pointer, which could cause segfaults.",
    "metadata": {
      "test": true
    },
    "created_at": "2025-07-27T07:45:57.169319",
    "usage_count": 3
  },
  "00999bcc-f249-4538-bf80-e22abc101b5c": {
    "id": "00999bcc-f249-4538-bf80-e22abc101b5c",
    "rubric_question": "Does the code properly validate input parameters?",
    "caveat_text": "Input validation should check for both null values and boundary conditions.",
    "original_feedback": "Student missed checking for negative values in array indices.",
    "metadata": {
      "test": true
    },
    "created_at": "2025-07-27T07:46:00.740769",
    "usage_count": 0
  },
  "8d944f45-feb8-41f5-baac-36e54bd0636e": {
    "id": "8d944f45-feb8-41f5-baac-36e54bd0636e",
    "rubric_question": "Test persistence question",
    "caveat_text": "Test persistence caveat",
    "original_feedback": "Test feedback",
    "metadata": {
      "persistence_test": true
    },
    "created_at": "2025-07-27T07:46:10.264646",
    "usage_count": 0
  },
  "524b74fa-a856-4dbd-b75e-aed9602ac4e8": {
    "id": "524b74fa-a856-4dbd-b75e-aed9602ac4e8",
    "rubric_question": "Does the code handle null pointer exceptions?",
    "caveat_text": "Always check for null pointers before dereferencing, especially in C/C++ code.",
    "original_feedback": "The student didn't check for null before using the pointer, which could cause segfaults.",
    "metadata": {
      "test": true
    },
    "created_at": "2025-07-27T07:50:21.619850",
    "usage_count": 2
  },
  "ce608e6d-da41-479e-b7e9-0fa1d384a732": {
    "id": "ce608e6d-da41-479e-b7e9-0fa1d384a732",
    "rubric_question": "Does the code properly validate input parameters?",
    "caveat_text": "Input validation should check for both null values and boundary conditions.",
    "original_feedback": "Student missed checking for negative values in array indices.",
    "metadata": {
      "test": true
    },
    "created_at": "2025-07-27T07:50:25.233146",
    "usage_count": 0
  },
  "ff73016f-5779-4402-92b0-e3b1735e2436": {
    "id": "ff73016f-5779-4402-92b0-e3b1735e2436",
    "rubric_question": "Test persistence question",
    "caveat_text": "Test persistence caveat",
    "original_feedback": "Test feedback",
    "metadata": {
      "persistence_test": true
    },
    "created_at": "2025-07-27T07:50:36.530543",
    "usage_count": 0
  },
  "a1200f44-8bd6-4b0b-a160-a292e3b7b98a": {
    "id": "a1200f44-8bd6-4b0b-a160-a292e3b7b98a",
    "rubric_question": "Does the student properly implement error handling in their code?",
    "caveat_text": "When evaluating error handling, ensure the code actually includes try-catch blocks or conditional checks for potential runtime errors, rather than just assuming the code will execute without exceptions. Simply having syntactically correct code that performs an operation does not constitute proper error handling if it lacks mechanisms to catch and manage predictable failures.",
    "original_feedback": "The code doesn't handle division by zero error. This will crash the program.",
    "metadata": {
      "rubric_item_id": "test_item_1",
      "original_decision": "check - The code handles division correctly"
    },
    "created_at": "2025-07-27T07:50:45.906836",
    "usage_count": 0
  },
  "f80f7282-5d9e-45b8-9e3b-3b475b6d40ba": {
    "id": "f80f7282-5d9e-45b8-9e3b-3b475b6d40ba",
    "rubric_question": "Does the code handle null pointer exceptions?",
    "caveat_text": "Always check for null pointers before dereferencing, especially in C/C++ code.",
    "original_feedback": "The student didn't check for null before using the pointer, which could cause segfaults.",
    "metadata": {
      "test": true
    },
    "created_at": "2025-07-27T07:55:38.936842",
    "usage_count": 1
  },
  "7b39bf0f-0e7f-4535-b4fd-6a5ace6df150": {
    "id": "7b39bf0f-0e7f-4535-b4fd-6a5ace6df150",
    "rubric_question": "Does the code properly validate input parameters?",
    "caveat_text": "Input validation should check for both null values and boundary conditions.",
    "original_feedback": "Student missed checking for negative values in array indices.",
    "metadata": {
      "test": true
    },
    "created_at": "2025-07-27T07:55:42.493985",
    "usage_count": 0
  },
  "685241f6-d8a8-4293-8036-9944559068bd": {
    "id": "685241f6-d8a8-4293-8036-9944559068bd",
    "rubric_question": "Test persistence question",
    "caveat_text": "Test persistence caveat",
    "original_feedback": "Test feedback",
    "metadata": {
      "persistence_test": true
    },
    "created_at": "2025-07-27T07:55:54.205223",
    "usage_count": 0
  },
  "e4984558-f873-4775-b7a5-c2c16f925025": {
    "id": "e4984558-f873-4775-b7a5-c2c16f925025",
    "rubric_question": "Does the student properly implement error handling in their code?",
    "caveat_text": "When evaluating error handling, ensure the code actually includes try-catch blocks or conditional checks for potential runtime errors, rather than just assuming the code will execute without exceptions. Simply having syntactically correct code that performs an operation does not constitute proper error handling if it lacks mechanisms to catch and manage predictable failures.",
    "original_feedback": "The code doesn't handle division by zero error. This will crash the program.",
    "metadata": {
      "rubric_item_id": "test_item_1",
      "original_decision": "check - The code handles division correctly"
    },
    "created_at": "2025-07-27T07:57:16.760950",
    "usage_count": 0
  }
}